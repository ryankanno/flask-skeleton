---
  - name: deployer | main.yml | create deploy directory
    file: state=directory path={{ flask_skeleton_install_path }} owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: deployer | main.yml | create virtual env directory
    file: state=directory path={{ flask_skeleton_install_path }}/venv/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: deployer | main.yml | create src directory
    file: state=directory path={{ flask_skeleton_install_path }}/code/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: deployer | main.yml | create app directory
    file: state=directory path={{ flask_skeleton_install_path }}/code/flask_skeleton owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: deployer | main.yml | get release timestamp
    command: date +%Y%m%d%H%M%S
    register: timestamp

  - name: deployer | main.yml | get release directory
    command: echo "{{ flask_skeleton_install_path}}/code/flask_skeleton/releases/{{ timestamp.stdout }}"
    register: release_path

  - name: deployer | main.yml | create release directory
    file: state=directory path={{ release_path.stdout }}

  - name: deployer | main.yml | copy src folder to server
    copy: src={{ flask_skeleton_src_path }}/flask_skeleton/ dest={{ release_path.stdout }}

  - name: deployer | main.yml | copy requirements to server
    copy: src={{ flask_skeleton_src_path }}/requirements.txt dest={{ release_path.stdout }}

  - name: deployer | main.yml | install requirements.txt
    pip: requirements={{ release_path.stdout }}/requirements.txt virtualenv={{ flask_skeleton_install_path }}/venv/

  - name: deployer | main.yml | update current symlink
    file: state=link path={{ flask_skeleton_install_path }}/code/flask_skeleton/current src={{ release_path.stdout }}

  - name: 'app: install nginx uwsgi conf'
    template: src=nginx_uwsgi.conf.j2 dest=/etc/nginx/sites-available/nginx_uwsgi.conf
    notify: restart nginx

  - name: 'web: enable nginx uwsgi conf'
    file: src=/etc/nginx/sites-available/nginx_uwsgi.conf dest=/etc/nginx/sites-enabled/nginx_uwsgi.conf state=link
    notify: restart nginx

  - name: 'web: install uwsgi conf'
    template: src=flask-skeleton.ini.j2 dest=/etc/uwsgi/apps-available/flask-skeleton.ini
    notify: restart uwsgi

  - name: 'web: enable uwsgi conf'
    file: src=/etc/uwsgi/apps-available/flask-skeleton.ini dest=/etc/uwsgi/apps-enabled/flask-skeleton.ini state=link
    notify: restart uwsgi
